#Character 2D
extends CharacterBody2D
var Jumps = 2
var health = 10
const SPEED = 300.0
const jump_power = -2000.0
const JUMP_VELOCITY = -400.0
const wall_jump_pushback = 100
const wall_slide_gravity = 100
var is_wall_sliding = false
var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")
# Called when the node enters the scene tree for the first time.
@onready var anim = get_node("AnimationPlayer")
func _ready():
	anim.play("Idle")
	
func _physics_process(delta):
	# wall sliding
	self.wall_slide(delta)
		
	if not is_on_floor():
		velocity.y += gravity * delta
		
	else:
	
		Jumps = 2
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		velocity.y = JUMP_VELOCITY
		anim.play("Jump")
		Jumps -= 1
	if Input.is_action_just_pressed("ui_accept") and not is_on_floor() and Jumps != 0:
		velocity.y += JUMP_VELOCITY
		anim.play("Jump")
		Jumps -= 1
	var direction = Input.get_axis("ui_left", "ui_right")
	print(direction)
	if direction == -1:
		get_node("AnimatedSprite2D").flip_h = true
	elif direction == 1:
		get_node("AnimatedSprite2D").flip_h = false
	if direction:
		velocity.x = direction * SPEED
		if velocity.y == 0:
			anim.play("Run")
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		if velocity.y == 0:
			anim.play("Idle")
	if velocity.y > 0:
		anim.play("Fall")
	move_and_slide()
	if health <= 0:
		queue_free()
# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	pass
	
func jump():
	velocity.y += gravity
	if Input.is_action_just_pressed("ui_up"):
		if is_on_floor():
			velocity.y = jump_power
		if is_on_wall() and Input.is_action_pressed("ui_right"):
			velocity.y = jump_power
			velocity.x = -wall_jump_pushback
			
		if is_on_wall and Input.is_action_pressed("ui_left"):
			velocity.y = jump_power
			velocity.x = wall_jump_pushback
			
func wall_slide(delta):
	if is_on_wall() and !is_on_floor():
		Jumps = 2
		if Input.is_action_pressed("ui_left") or Input.is_action_pressed("ui_right"):
			is_wall_sliding = true
		else:
			is_wall_sliding = false
	else:
		is_wall_sliding = false
	
	if is_wall_sliding:
		velocity.y += (wall_slide_gravity * delta)
		velocity.y = min(velocity.y, wall_slide_gravity)
